import pygame
from pygame.locals import*
from OpenGL.GL import*
from OpenGL.GLU import*
import random

def generate_additional_tetrahedron(t_vex_list, t_face_list):
    base_face = random.choice(t_face_list)  # 기존 면 중에서 하나를 무작위로 선택
    a, b, c = [t_vex_list[i] for i in base_face]  # 선택한 면의 꼭짓점 좌표를 가져옴

    # 삼각뿔의 꼭짓점 생성
    center = my_find_center_position(a, b, c)
    d = [center[0], center[1] + 1, center[2]]

    current_vex_index = len(t_vex_list)  # 새로운 꼭짓점 인덱스 설정
    t_vex_list.append(d)  # 새로운 꼭짓점 추가

    # 새로운 면 추가
    t_face_list.append([base_face[0], base_face[1], current_vex_index])
    t_face_list.append([base_face[1], base_face[2], current_vex_index])
    t_face_list.append([base_face[2], base_face[0], current_vex_index])

    return t_vex_list, t_face_list


def my_find_center_position(t_a, t_b, t_c):
    '''이 함수는 세개의 3차원 좌표를 받아서 중심점 좌표를 반환합니다.'''
    
    t_result = [0, 0, 0]
    for i in range(0,3,1):
        t_result[i] = (t_a[i] + t_b[i] + t_c[i])/3
    return t_result

def my_3DFileLoader(t_filepath):
    with open(t_filepath, 'r', encoding='utf8') as t_file:   # 파일을 읽어서 t_buf1에 저장
        t_buf1 = t_file.readlines()

    t_vex_list = []    # 점좌표 데이터 저장공간
    t_face_list = []   # 면정보 데이터 저장공간

    for x in t_buf1:
        a = x.strip()                                # '\n' 과 같이 숨은 문자열 제거
        a = a.replace(',','')                        # ',' 기호 제거 
        a = a.split(' ')                             # 공백을 기준으로 문자열을 조각내고 리스트로 저장
        

        if a[0] =='v':
            b = [float(a[1]), float(a[2]), float(a[3])]  # 두번째, 세번째, 네번째 문자숫자를 숫자로 변환후 리스트로 저장
            t_vex_list.append(b)                         # 점데이터 3차원 벡터 리스트를 my_vex 리스트에 요소로 넣기

        elif a[0] == 'f':
            b = [int(a[1]), int(a[2]), int(a[3])]  # 두번째, 세번째, 네번째 문자숫자를 숫자로 변환후 리스트로 저장
            t_face_list.append(b)                        # 면정보 3차원 벡터 리스트를 my_face 리스트에 요소로 넣기

    return t_vex_list, t_face_list

def main(t_v, t_f):
    pygame.init()
    display = (800,600)
    pygame.display.set_mode(display, DOUBLEBUF|OPENGL)
    
    gluPerspective(45, (display[0]/display[1]),0.1, 50.0)
    
    glTranslatef(0.0, 0.0, -5.0)    
    
    add_tetrahedron_interval = 1000 # 삼각뿔이 추가되는 시간 간격 (밀리초 단위)
    last_added_time = pygame.time.get_ticks()

    while True:
        current_time = pygame.time.get_ticks()

        if current_time - last_added_time >= add_tetrahedron_interval:
            last_added_time = current_time
            t_v, t_f = generate_additional_tetrahedron(t_v, t_f)

        for ev in pygame.event.get():
            if ev.type == pygame.QUIT:
                pygame.quit()

        glRotatef(1,3,1,1)

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        my_draw(t_v, t_f)
        pygame.display.flip()
        pygame.time.wait(10)

def my_draw(a_v, a_f):
    glBegin(GL_LINES)
    for f in a_f:
        for i in range(0,3,1):
            glVertex3fv(a_v[f[i  ]])
            if i !=2:
                 glVertex3fv(a_v[f[i+1]])
            else:
                glVertex3fv(a_v[f[0]])
    glEnd()
    
# 파일에서 기존의 데이터 로드
my_vex, my_face = my_3DFileLoader('tetra.txt')
                                  
# 삼각뿔 추가
my_vex, my_face = generate_additional_tetrahedron(my_vex, my_face)

# 결과 출력 및 시각화                                  ')
main(my_vex, my_face)
